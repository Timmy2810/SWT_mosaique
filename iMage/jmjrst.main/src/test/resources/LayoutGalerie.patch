Index: main/java/org/jis/generator/LayoutGalerie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main/java/org/jis/generator/LayoutGalerie.java	(revision 0561ee5741530e3d48e96b235abad84afeed1b52)
+++ main/java/org/jis/generator/LayoutGalerie.java	(revision e4dc83113da76db1d43f976d7dcb57abb76fe4e6)
@@ -474,6 +474,10 @@
 
     public void copyFile(File file, File ziel) throws FileNotFoundException, IOException {
 
+        if (file == null) {
+            throw new FileNotFoundException();
+        }
+
     	if (ziel.exists()) {
     		ziel.delete();
 		}
Index: test/java/org/jis/generator/LayoutGalerieTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/java/org/jis/generator/LayoutGalerieTest.java	(revision 0561ee5741530e3d48e96b235abad84afeed1b52)
+++ test/java/org/jis/generator/LayoutGalerieTest.java	(revision e4dc83113da76db1d43f976d7dcb57abb76fe4e6)
@@ -4,14 +4,18 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.URISyntaxException;
+import java.nio.channels.FileChannel;
+import java.nio.channels.NonReadableChannelException;
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
 import java.util.Random;
+import java.nio.channels.FileLock;
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Rule;
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
@@ -20,7 +24,6 @@
 public class LayoutGalerieTest {
 
     private LayoutGalerie galerieUnderTest;
-
     private File fromFile;
     private File toFile;
 
@@ -41,7 +44,6 @@
     public final void terminate() {
 
         galerieUnderTest = null;
-        fromFile.delete();
         toFile.delete();
     }
 
@@ -74,6 +76,8 @@
 
             assertEquals(randomString, contents);
 
+            fromFile.delete();
+
         } catch (IOException | URISyntaxException e) {
             fail();
         }
@@ -85,12 +89,11 @@
      * nicht vorhandenen Datei
      */
     @Test
-    public final void testCopyFileDir() throws URISyntaxException {
+    public final void testCopyNonExistingFile() throws URISyntaxException {
 
 
         try {
             final File resourceFolder = new File(this.getClass().getResource(File.separator).toURI());
-            fromFile = new File(resourceFolder, "from");
             toFile = new File(resourceFolder, "to");
 
             galerieUnderTest.copyFile(fromFile, toFile);
@@ -99,7 +102,9 @@
 
             //Erwarte File not Found Exception
             fail();
-        } catch (IOException | URISyntaxException ignored) {
+        } catch (FileNotFoundException ignored) {
+        } catch (IOException e) {
+            fail();
         }
 
     }
@@ -109,7 +114,7 @@
      * Verzeichnisses anstatt einer Datei
      */
     @Test
-    public final void testCopyNonExistingFile() throws URISyntaxException {
+    public final void testCopyFileDir() throws URISyntaxException {
 
 
         try {
@@ -117,12 +122,13 @@
             fromFile = new File(resourceFolder, "from");
             toFile = new File(resourceFolder, "to");
 
-            fromFile.mkdir();
 
             galerieUnderTest.copyFile(fromFile, toFile);
 
             assertTrue(toFile.exists());
 
+            fromFile.delete();
+
             //Erwarte File not Found Exception
             fail();
         } catch (IOException | URISyntaxException ignored) {
@@ -163,9 +169,96 @@
 
             assertEquals(randomString, contents);
 
+            fromFile.delete();
+
         } catch (IOException | URISyntaxException e) {
             fail();
         }
+
+    }
+
+    /**
+     * Test method for {@link org.jis.generator.LayoutGalerie#copyFile(File, File)}.
+     * Testet, ob eine Datei trotz Lesegesch端tzt kopiert werden kann
+     */
+    @Test
+    public final void testCopyFileWithFileReadlock() throws URISyntaxException {
+
+        try {
+            final File resourceFolder = new File(this.getClass().getResource(File.separator).toURI());
+            fromFile = new File(resourceFolder, "from");
+            toFile = new File(resourceFolder, "to");
+
+            byte[] array = new byte[10];
+            new Random().nextBytes(array);
+            String randomString = new String(array);
+
+            fromFile.createNewFile();
+            Path fromPath = FileSystems.getDefault().getPath(fromFile.getPath());
+            Files.writeString(fromPath, randomString);
+
+            FileChannel channel = FileChannel.open(fromPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND);
+            channel.lock();
+
+            galerieUnderTest.copyFile(fromFile, toFile);
+
+            assertTrue(toFile.exists());
+
+            Path toPath = FileSystems.getDefault().getPath(toFile.getPath());
+            String contents = Files.readString(toPath);
+
+            assertEquals(randomString, contents);
+
+            fromFile.delete();
+
+            //Es wird eine Exception erwartet daher darf dieser Teil niemals ausgef端hrt werden
+            fail();
+        } catch (URISyntaxException e) {
+            fail();
+        } catch (IOException ignored) {
+        }
+
+    }
+
+    /**
+     * Test method for {@link org.jis.generator.LayoutGalerie#copyFile(File, File)}.
+     * Testet, ob eine Datei trotz Schreibgesch端tzt ersetzt werden kann
+     */
+    @Test
+    public final void testCopyFileWithFileWritelock() throws URISyntaxException {
+
+        try {
+            final File resourceFolder = new File(this.getClass().getResource(File.separator).toURI());
+            fromFile = new File(resourceFolder, "from");
+            toFile = new File(resourceFolder, "to");
+
+            byte[] array = new byte[10];
+            new Random().nextBytes(array);
+            String randomString = new String(array);
+
+            toFile.createNewFile();
+            Path toPath = FileSystems.getDefault().getPath(toFile.getPath());
+
+            FileChannel channel = FileChannel.open(toPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND);
+            channel.lock();
+
+            galerieUnderTest.copyFile(fromFile, toFile);
+
+            assertTrue(toFile.exists());
+
+            toPath = FileSystems.getDefault().getPath(toFile.getPath());
+            String contents = Files.readString(toPath);
+
+            assertEquals(randomString, contents);
+
+            fromFile.delete();
+
+            //Es wird eine Exception erwartet daher darf dieser Teil niemals ausgef端hrt werden
+            fail();
+        } catch (URISyntaxException e) {
+            fail();
+        } catch (IOException ignored) {
+        }
 
     }
 
